https://leetcode.com/problems/majority-element/
class Solution {
    private int randRange(Random rand, int min, int max) {
        return rand.nextInt(max - min) + min;
    }

    private int countOccurences(int[] nums, int num) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }

    public int majorityElement(int[] nums) {
        Random rand = new Random();

        int majorityCount = nums.length/2;

        while (true) {
            int candidate = nums[randRange(rand, 0, nums.length)];
            if (countOccurences(nums, candidate) > majorityCount) {
                return candidate;
            }
        }
    }
}


https://leetcode.com/problems/valid-anagram/
class Solution {
    public boolean isAnagram(String s, String t) {
 
        if(s.length() != t.length()){
            return false;
        }
        
        char[] str1 = s.toCharArray();
        char[] str2 = t.toCharArray();
        Arrays.sort(str1);
        Arrays.sort(str2);
     
        return Arrays.equals(str1, str2);
    }
}

https://leetcode.com/problems/sorting-the-sentence/
class Solution {
    public String sortSentence(String s) {
        String[] sArr = s.split("\\s");
        Arrays.sort(sArr, new Comparator<String>(){
           public int compare(String s1,String s2){
               return s1.charAt(s1.length()-1) - s2.charAt(s2.length()-1);
           } 
        });
        String result="";
        for(int i=0;i<sArr.length-1;i++){
            result+=sArr[i].substring(0,sArr[i].length()-1);
            result+=" ";
        }
        result+=sArr[sArr.length-1].substring(0,sArr[sArr.length-1].length()-1);
        return result;
    }
}

Search for an element in the Circular Sorted Array.
Ex- {12,15,2,4,7,9} Search for 7
class Main {
    static int pivotedBinarySearch(int arr[], int n, int key)
    {
        int pivot = findPivot(arr, 0, n - 1);
 
        
        if (pivot == -1)
            return binarySearch(arr, 0, n - 1, key);
 
        
        if (arr[pivot] == key)
            return pivot;
        if (arr[0] <= key)
            return binarySearch(arr, 0, pivot - 1, key);
        return binarySearch(arr, pivot + 1, n - 1, key);
    }
 
    
    static int findPivot(int arr[], int low, int high)
    {
        
        if (high < low)
            return -1;
        if (high == low)
            return low;
 
        /* low + (high - low)/2; */
        int mid = (low + high) / 2;
        if (mid < high && arr[mid] > arr[mid + 1])
            return mid;
        if (mid > low && arr[mid] < arr[mid - 1])
            return (mid - 1);
        if (arr[low] >= arr[mid])
            return findPivot(arr, low, mid - 1);
        return findPivot(arr, mid + 1, high);
    }
 
   
    static int binarySearch(int arr[], int low, int high, int key)
    {
        if (high < low)
            return -1;
 
        
        int mid = (low + high) / 2;
        if (key == arr[mid])
            return mid;
        if (key > arr[mid])
            return binarySearch(arr, (mid + 1), high, key);
        return binarySearch(arr, low, (mid - 1), key);
    }
 
    public static void main(String args[])
    {
        // Let us search 3 in below array
        int arr1[] = { 12,15,2,4,7,9 };
        int n = arr1.length;
        int key = 7;
        System.out.println("Index of the element is : "
                           + pivotedBinarySearch(arr1, n, key));
    }
    }
