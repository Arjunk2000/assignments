1. Merge two sorted Arrays without extra space.

a[] = {1,3,5,7}
b[] = {2,4,6,8}

Output
a[] = {1,2,3,4}
b[] = {5,6,7,8}


import java.util.Arrays;

public class MergeTwoSortedArraysWithoutExtraSpace {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a[] = {1,3,5,7};
		int b[] = {2,4,6,8};
		
		
		int i = a.length-1;
		int j = 0;
		
		int temp =0;
		
		while(i>=0 && j<b.length)
		{
			if(a[i]>=b[j])
			{
				//swap
				temp = a[i];
				a[i]= b[j];
				a[i] = temp;
				/*
				 * a[i] = a[i]^b[j]; b[j] = a[i]^b[j]; a[i] = a[i]^b[j];
				 */
			}
			
			i--;
			j++;
		}
		
		
		Arrays.sort(a);
		Arrays.sort(b);
		
		
		System.out.println(Arrays.toString(a));
		System.out.println(Arrays.toString(b));

	}

}


2. Find the index of a row containing the maximum number of 1’s in a binary matrix

Input:

[ 0 0 0 1 1 ]
[ 0 0 1 1 1 ]
[ 0 0 0 0 0 ]
[ 0 1 1 1 1 ]
[ 0 0 0 0 1 ]

Output: The maximum 1’s are present in row 4

import java.util.*;
 
class Main {
 
static int R = 4 ;
static int C  = 4 ;
 

static int first(int arr[], int low, int high)
{
    if(high >= low)
    {
        int mid = low + (high - low)/2;
     
        
        if ( ( mid == 0 || arr[mid-1] == 0) && arr[mid] == 1)
            return mid;
     
        else if (arr[mid] == 0)
            return first(arr, (mid + 1), high);
         
        
        else
            return first(arr, low, (mid -1));
    }
    return -1;
}
 

static int rowWithMax1s(int mat[][])
{
    
    int max_row_index = 0, max = -1;
 
    
    int i, index;
    for (i = 0; i < R; i++)
    {
        index = first (mat[i], 0, C-1);
        if (index != -1 && C-index > max)
        {
            max = C - index;
            max_row_index = i;
        }
    }
 
    return max_row_index;
}
 
   
    public static void main(String[] args) {
         
    int mat[][] = { { 0 0 0 1 1 }
{ 0 0 1 1 1 }
{  0 0 0 0 0 }
{  0 1 1 1 1 }
{  0 0 0 0 1 }};
 
    System.out.print("Index of row with maximum 1s is " + rowWithMax1s(mat));
 
    }
    
    
    
    Find the transpose of a given matrix.
Transpose Matrix is formed by changing all the row elements to column elements and vice -versa

Ex-

2 3 4
5 6 4

Output:

2 5
3 6
4 4


class GFG
{
    static final int N = 4;
     
    // This function stores transpose
    // of A[][] in B[][]
    static void transpose(int A[][], int B[][])
    {
        int i, j;
        for (i = 0; i < N; i++)
            for (j = 0; j < N; j++)
                B[i][j] = A[j][i];
    }
     
    // Driver code
    public static void main (String[] args)
    {
        int A[][] = { 2 3 4}
{5 6 4}};
     
        int B[][] = new int[N][N], i, j;
     
        transpose(A, B);
     
        System.out.print("Result matrix is \n");
        for (i = 0; i < N; i++)
        {
            for (j = 0; j < N; j++)
            System.out.print(B[i][j] + " ");
            System.out.print("\n");
        }
    }
}
}
