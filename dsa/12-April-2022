Cyclically rotate an array n number of times
Time Complexity can be O(n2)

A[] = {1, 2, 3, 4, 5}
N = 1

Output; 5 1 2 3 4


A[] = {1, 2, 3, 4, 5}
N = 2

Output; 4 5 1 2 3


A[] = {1, 2, 3, 4, 5}
N = 3

Output: 3 4 5 1 2


import java.util.Arrays;
 
public class Main
{
    static int arr[] = new int[]{1, 2, 3, 4, 5};
     
    
    static void rotate()
    {
       int i = 0, j = arr.length - 1;
       while(i != j)
       {
         int temp = arr[i];
         arr[i] = arr[j];
         arr[j] = temp;
         i++;
       }
    }
     
    /* Driver program */
    public static void main(String[] args)
    {
        System.out.println("Given Array is");
        System.out.println(Arrays.toString(arr));
         
        rotate();
         
        System.out.println("Rotated Array is");
        System.out.println(Arrays.toString(arr));
    }
}

Search Insert Position

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [1,3,5,6], target = 5
Output: 2


Input: nums = [1,3,5,6], target = 2
Output: 1

Input: nums = [1,3,5,6], target = 7
Output: 4


class Solution {
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;
        while(start<=end){
            int mid = start+(end-start/2);
            if(nums[mid]>=target)
                end= mid-1;
            else
                start= mid+1;
        }
        return start;
    }
}
