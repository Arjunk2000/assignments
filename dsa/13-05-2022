Segregate even and odd nodes

https://practice.geeksforgeeks.org/problems/segregate-even-and-odd-nodes-in-a-linked-list5035/1/?page=2&difficulty[]=0&category[]=Linked%20List&sortBy=submissions
class Solution{
    
    Node divide(int N, Node head){
        ArrayList<Integer> odd = new ArrayList<>();
        ArrayList<Integer> even = new ArrayList<>();
        while(head != null){
            if(head.data % 2 == 0){
                even.add(head.data);
            } else {
                odd.add(head.data);
            }
            head = head.next;
        }
        Node Result = null, dummy = null;
        for(int i = 0; i < even.size(); i++){
            Node newNode = new Node(even.get(i));
            if(Result == null){
                Result = newNode;
                dummy = Result;
            } else {
                dummy.next = newNode;
                dummy = dummy.next;
            }
        }
        
        for(int i = 0; i < odd.size(); i++){
            Node newNode = new Node(odd.get(i));
            if(Result == null){
                Result = newNode;
                dummy = Result;
            } else {
                dummy.next = newNode;
                dummy = dummy.next;
            }
        }
        return Result;
    }
} 





Detect loop in a linked list
https://practice.geeksforgeeks.org/problems/detect-loop-in-linked-list/1/?page=1&difficulty[]=-1&difficulty[]=0&category[]=Linked%20List&sortBy=submissions



class Solution {
    //Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head){
       Node slow_ptr = head;
       Node fast_ptr = head;
       
       while(slow_ptr != null && fast_ptr != null && fast_ptr.next != null){
           slow_ptr = slow_ptr.next;
           fast_ptr = fast_ptr.next.next;
           
           if(slow_ptr == fast_ptr){
               return true;
           }
       }
       return false;
   }
