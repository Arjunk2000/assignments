"1. Intersection of two linked lists
https://leetcode.com/problems/intersection-of-two-linked-lists/


public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null || headB==null)
        {
            return null;
        }
        ListNode a = headA;
        ListNode b = headB;
        while(a!=b)
        {
            if(a==null)
            {
                a=headB;
            }
            else
            {
                a=a.next;
            }
            if(b==null)
            {
                b=headA;
            }
            else
            {
                 b=b.next; 
            }
        }
        return a; 
    }
}

2. Find if the liked list is a Palindrome
https://www.geeksforgeeks.org/function-to-check-if-a-singly-linked-list-is-palindrome/

Ex -
M->A->D->A->M
Output - True

Ex - S->T->A->R
Output - false"



public class LinkedList{
     

Node head;
Node left;
 
public class Node
{
    public char data;
    public Node next;
 
  
    public Node(char d)
    {
        data = d;
        next = null;
    }
}
 
boolean isPalindromeUtil(Node right)
{
    left = head;
 
    
    if (right == null)
        return true;
 
    
    boolean isp = isPalindromeUtil(right.next);
    if (isp == false)
        return false;
 
    
    boolean isp1 = (right.data == left.data);
 
    left = left.next;
 
    
    return isp1;
}
 

boolean isPalindrome(Node head)
{
    boolean result = isPalindromeUtil(head);
    return result;
}
 

public void push(char new_data)
{
     
    
    Node new_node = new Node(new_data);
 
   
    new_node.next = head;
 
    
    head = new_node;
}
 

void printList(Node ptr)
{
    while (ptr != null)
    {
        System.out.print(ptr.data + "->");
        ptr = ptr.next;
    }
    System.out.println("Null");
}
 

public static void main(String[] args)
{
    LinkedList llist = new LinkedList();
    char[] str = { 'm', 'a', 'd', 'a', 'm' };
    for(int i = 0; i < 5; i++)
    {
        llist.push(str[i]);
        llist.printList(llist.head);
         
        if (llist.isPalindrome(llist.head))
        {
            System.out.println("Is Palindrome");
            System.out.println("");
        }
        else
        {
            System.out.println("Not Palindrome");
            System.out.println("");
        }
    }
}
}
