 WAP for searching a number using binary search. Return the index of the num if exists else return.
 package com.dsa;
public class Main {
    public static void main(String[] args)
    {
        System.out.println(searchUsingBinarySearch(new int[] { 3, 4, 5, 6, 7, 8, 9 },9));
        }
    private static int searchUsingBinarySearch(int[] array, int key) {
        int low = 0, high = array.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (array[mid] == key)
                return mid + 1;
            else if (array[mid] < key)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return -1;
    }
}

Find the cube root of a number using binary search
 package com.dsa;

public class Main {
    public static void main(String[] args)
    {
        int num = 8;

        int sqrt = findcuberoot(num);
        System.out.println(sqrt);

        
    }

    private static int findcuberoot(int num) {

        int start = 0;
        int end = num;

        int ans = 0;

        while(start<=end)
        {
            int mid = (start +end)/2;

            if(mid *mid*mid == num)
            {
                return mid;
            }

            //right
            else if (num >mid *mid*mid)
            {
                start = mid +1;
                ans = mid;
            }

            else
            {
                end = mid -1;
            }
        }

        return ans;
    }

}

Find the intersection elements of two sorted arrays
A[] = { 3,6,8} B[] ={1,2,3,5,6,90,789}
Output = 3,6


import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Stream;

public class ArrayUnionAndIntersection {

    public static Set findUnion(Integer[] ... arrays){
        Set set = new HashSet<>();
        Stream.of(arrays).forEach(array -> set.addAll(Arrays.asList(array)));
        return set;
    }

    public static Set findIntersection(Integer[] ... arrays){
        Set intersectionSet = new HashSet<>(Arrays.asList(arrays[0]));
        Stream.of(arrays).skip(1).forEach(array -> {
            HashSet set = new HashSet<>(Arrays.asList(array));
            intersectionSet.retainAll(set);
        });
        return intersectionSet;
    }

    public static void main(String[] args){
        Integer[] firstArray = { 3,6,8} ;

        Integer[] secondArray = {1,2,3,5,6,90,789};

        
       

        Set intersection = findIntersection(firstArray, secondArray);
        System.out.println("Output Array after intersection");
        System.out.println(intersection);
    }
}
