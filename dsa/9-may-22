1.Sum of all Odd length Sub Arrays
https://leetcode.com/problems/sum-of-all-odd-length-subarrays/

class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i] * getCount(i, arr.length);
        }
        return sum;
    }
	
    private int getCount(int i, int n) {
        int leftOdd = ((i + 1) >> 1);
        int rightOdd = ((n - i) >> 1);
        int leftEven = (i >> 1) + 1;
        int rightEven = ((n - 1 - i) >> 1) + 1;
        return leftOdd * rightOdd + leftEven * rightEven;
    }
}



2. Largest Sum Contiguous Subarray
https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/


import java.io.*;

import java.util.*;
 
class Kadane
{
    public static void main (String[] args)
    {
        int [] a = {-2, -3, 4, -1, -2, 1, 5, -3};
        System.out.println("Maximum contiguous sum is " +
                                       maxSubArraySum(a));
    }
 
    static int maxSubArraySum(int a[])
    {
        int size = a.length;
        int max_so_far = Integer.MIN_VALUE, max_ending_here = 0;
 
        for (int i = 0; i < size; i++)
        {
            max_ending_here = max_ending_here + a[i];
            if (max_so_far < max_ending_here)
                max_so_far = max_ending_here;
            if (max_ending_here < 0)
                max_ending_here = 0;
        }
        return max_so_far;
    }
}
